export type AiModelProvider = 'stabilityAi' | 'comfyUi' | 'replicate';

export interface AiModelConfig {
  provider: AiModelProvider;
  apiKey?: string;
  endpoint?: string;
  modelId?: string;
}

export interface AiModelRequest {
  inputImage: string;  // base64 image
  color: string;
  targetAspectRatio?: number;
  width?: number;
  height?: number;
}

export interface AiModelResponse {
  outputImage: string;  // base64 or URL
  error?: string;
}

// Abstract base class for AI model implementations
export abstract class AiModelService {
  protected config: AiModelConfig;

  constructor(config: AiModelConfig) {
    this.config = config;
  }

  abstract generateImage(request: AiModelRequest): Promise<AiModelResponse>;
}

// Factory to create the appropriate AI model service
export class AiModelFactory {
  static createService(config: AiModelConfig): AiModelService {
    switch (config.provider) {
      case 'stabilityAi':
        return new StabilityAiService(config);
      case 'comfyUi':
        return new ComfyUiService(config);
      case 'replicate':
        return new ReplicateService(config);
      default:
        throw new Error(`Unsupported AI model provider: ${config.provider}`);
    }
  }
}

// Stability AI implementation
export class StabilityAiService extends AiModelService {
  async generateImage(request: AiModelRequest): Promise<AiModelResponse> {
    try {
      // Ensure we have an API key
      if (!this.config.apiKey) {
        throw new Error('Stability AI API key is not configured');
      }

      // Convert base64 to binary if needed
      let imageData = request.inputImage;
      if (imageData.startsWith('data:image/')) {
        imageData = imageData.split(',')[1];
      }

      // Create form data
      const formData = new FormData();
      const blob = new Blob([Buffer.from(imageData, 'base64')], { type: 'image/png' });
      formData.append('init_image', blob);
      
      // Add other parameters
      formData.append('text_prompts[0][text]', `Transform this portrait into a mystical aura reading. 
        The aura should predominantly feature ${request.color} energy, 
        with ethereal, translucent layers flowing around the subject. 
        Maintain a dreamy, spiritual quality while preserving the subject's likeness.`);
      formData.append('text_prompts[0][weight]', '1');
      formData.append('text_prompts[1][text]', 'distorted features, unrealistic colors, oversaturated, poor quality, blurry, grainy');
      formData.append('text_prompts[1][weight]', '-1');
      formData.append('cfg_scale', '7');
      formData.append('steps', '30');
      formData.append('samples', '1');

      if (request.width) formData.append('width', request.width.toString());
      if (request.height) formData.append('height', request.height.toString());
      
      const engineId = 'stable-diffusion-xl-1024-v1-0';
      const apiHost = 'https://api.stability.ai';
      
      // Call the API
      const response = await fetch(
        `${apiHost}/v1/generation/${engineId}/image-to-image`,
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${this.config.apiKey}`,
          },
          body: formData,
        }
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || `Stability AI API error: ${response.statusText}`);
      }

      const responseData = await response.json();
      
      // Get the first generated image
      const generatedImage = responseData.artifacts[0];
      
      if (!generatedImage || !generatedImage.base64) {
        throw new Error('No image generated by Stability AI');
      }

      return {
        outputImage: `data:image/png;base64,${generatedImage.base64}`,
      };
    } catch (error) {
      console.error('StabilityAI service error:', error);
      return {
        outputImage: '',
        error: error instanceof Error ? error.message : 'Unknown error in StabilityAI service'
      };
    }
  }
}

// ComfyUI implementation (placeholder)
export class ComfyUiService extends AiModelService {
  async generateImage(request: AiModelRequest): Promise<AiModelResponse> {
    // ComfyUI implementation will go here
    throw new Error('ComfyUI implementation not yet available');
  }
}

// Replicate implementation (placeholder)
export class ReplicateService extends AiModelService {
  async generateImage(request: AiModelRequest): Promise<AiModelResponse> {
    // Replicate implementation will go here
    throw new Error('Replicate implementation not yet available');
  }
}
